color = lower_color
) +
geom_polygon(alpha = 0.8) +
scale_fill_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
scale_color_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
# stimulus onset
geom_vline(xintercept = 0, lty = 2, col = "grey30") +
annotate(
geom = "text",
x = 0, y = max(y),
hjust = 1,
vjust = -1,
size = 5, angle = 90,
label = "stimulus onset",
color = "grey30"
) +
# starting point
geom_hline(yintercept = beta_s, lty = 3, col = "purple") +
annotate(
geom = "label",
x = 0, y = beta_s,
hjust = 1,
vjust = 0.5,
size = 5,
label = "starting point",
colour = "purple"
) +
# non-decision time
annotate(
geom = "rect",
xmin = 0, xmax = tau,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
# drift rate
# geom_segment(
#     aes(
#         x = tau,
#         # xend = tau + 0.1,
#         xend = tau + 0.1 * max_x,
#         y = beta_s,
#         # yend = log(delta / (1 - beta) ) + delta / 2
#         # yend = beta_s + delta
#         yend = ifelse(beta_s + delta > s, s, beta_s + delta)
#         ),
#     arrow = arrow(
#         length = unit(0.2, "cm"),
#         ends = "last", type = "closed"
#         ),
#     size = 0.5, colour = "darkgreen"
#     ) +
geom_spoke(
aes(x = tau, y = beta_s, angle = drift_angle * (pi / 180), radius = 0.5),
arrow = arrow(length = unit(0.2, "cm"), ends = "last", type = "closed"),
color  = "darkgreen"
) +
annotate(
geom = "label",
x = tau,
y = beta_s,
hjust = 1, vjust = 0.5,
size = 5,
label = "drift rate",
color = "darkgreen"
) +
# boundary separation
geom_segment(
aes(
x = mean(x), xend = mean(x),
y = -s, yend = s,
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "both", type = "closed"
),
size = 0.5, colour = "black"
) +
annotate(
geom = "label",
x = mean(x), y = 0,
hjust = 0.5, vjust = 0.5,
size = 5,
label = "boundary separation",
color = "black"
) +
# labelling distributions
annotate(
geom = "label",
x = min(df2$x[df2$resp == "upper"]),
y = min(df2$y[df2$resp == "upper"]),
hjust = 0, vjust = -0.5,
size = 5,
label = paste0(
"RT distribution for correct responses (",
(n_correct / 1e3) * 100, "% of trials)"
)
) +
annotate(
geom = "label",
x = min(df2$x[df2$resp == "lower"]),
y = max(df2$y[df2$resp == "lower"]),
hjust = 0, vjust = 1.5,
size = 5,
label = paste0(
"RT distribution for incorrect responses (",
(n_incorrect / 1e3) * 100, "% of trials)"
)
) +
# aesthetics
theme_ipsum_rc(base_size = 12, axis_title_size = 12) +
theme(
axis.text.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 3), "cm")
) +
labs(x = "Reaction time (in seconds)", y = "") +
coord_cartesian(xlim = c(0, NA), clip = "off") +
scale_x_continuous(
sec.axis = sec_axis(trans = ~.)
)
df2 %>%
ggplot(aes(x = x, y = y, fill = resp, color = resp) ) +
# plotting densities
geom_segment(
data = . %>% filter(resp == "upper"),
aes(x = 0, xend = max_x, y = min(y), yend = min(y) ),
color = upper_color
) +
geom_segment(
data = . %>% filter(resp == "lower"),
aes(x = 0, xend = max_x, y = max(y), yend = max(y) ),
color = lower_color
) +
geom_polygon(alpha = 0.8) +
scale_fill_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
scale_color_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
# stimulus onset
geom_vline(xintercept = 0, lty = 2, col = "grey30") +
annotate(
geom = "text",
x = 0, y = max(y),
hjust = 1,
vjust = -1,
size = 5, angle = 90,
label = "stimulus onset",
color = "grey30"
) +
# starting point
geom_hline(yintercept = beta_s, lty = 3, col = "purple") +
annotate(
geom = "label",
x = 0, y = beta_s,
hjust = 1,
vjust = 0.5,
size = 5,
label = "starting point",
colour = "purple"
) +
# non-decision time
annotate(
geom = "rect",
xmin = 0, xmax = tau,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
# drift rate
# geom_segment(
#     aes(
#         x = tau,
#         # xend = tau + 0.1,
#         xend = tau + 0.1 * max_x,
#         y = beta_s,
#         # yend = log(delta / (1 - beta) ) + delta / 2
#         # yend = beta_s + delta
#         yend = ifelse(beta_s + delta > s, s, beta_s + delta)
#         ),
#     arrow = arrow(
#         length = unit(0.2, "cm"),
#         ends = "last", type = "closed"
#         ),
#     size = 0.5, colour = "darkgreen"
#     ) +
geom_spoke(
aes(x = tau, y = beta_s, angle = drift_angle * (pi / 180), radius = 0.5),
arrow = arrow(length = unit(0.2, "cm"), ends = "last", type = "closed"),
color  = "darkgreen"
) +
annotate(
geom = "label",
x = tau,
y = beta_s,
hjust = 1, vjust = 0.5,
size = 5,
label = "drift rate",
color = "darkgreen"
) +
# boundary separation
geom_segment(
aes(
x = mean(x), xend = mean(x),
y = -s, yend = s,
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "both", type = "closed"
),
size = 0.5, colour = "black"
) +
annotate(
geom = "label",
x = mean(x), y = 0,
hjust = 0.5, vjust = 0.5,
size = 5,
label = "boundary separation",
color = "black"
) +
# labelling distributions
annotate(
geom = "label",
x = min(df2$x[df2$resp == "upper"]),
y = min(df2$y[df2$resp == "upper"]),
hjust = 0, vjust = -0.5,
size = 5,
label = paste0(
"RT distribution for correct responses (",
(n_correct / 1e3) * 100, "% of trials)"
)
) +
annotate(
geom = "label",
x = min(df2$x[df2$resp == "lower"]),
y = max(df2$y[df2$resp == "lower"]),
hjust = 0, vjust = 1.5,
size = 5,
label = paste0(
"RT distribution for incorrect responses (",
(n_incorrect / 1e3) * 100, "% of trials)"
)
) +
# aesthetics
theme_ipsum_rc(base_size = 12, axis_title_size = 12) +
theme(
axis.text.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 3), "cm")
) +
labs(x = "Reaction time (in seconds)", y = "") +
coord_cartesian(xlim = c(0, NA), clip = "off") +
scale_x_continuous(
sec.axis = sec_axis(
trans = ~.,
name = "Reaction time (in seconds)"
)
)
df2 %>%
ggplot(aes(x = x, y = y, fill = resp, color = resp) ) +
# plotting densities
geom_segment(
data = . %>% filter(resp == "upper"),
aes(x = 0, xend = max_x, y = min(y), yend = min(y) ),
color = upper_color
) +
geom_segment(
data = . %>% filter(resp == "lower"),
aes(x = 0, xend = max_x, y = max(y), yend = max(y) ),
color = lower_color
) +
geom_polygon(alpha = 0.8) +
scale_fill_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
scale_color_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
# stimulus onset
geom_vline(xintercept = 0, lty = 2, col = "grey30") +
annotate(
geom = "text",
x = 0, y = max(y),
hjust = 1,
vjust = -1,
size = 5, angle = 90,
label = "stimulus onset",
color = "grey30"
) +
# starting point
geom_hline(yintercept = beta_s, lty = 3, col = "purple") +
annotate(
geom = "label",
x = 0, y = beta_s,
hjust = 1,
vjust = 0.5,
size = 5,
label = "starting point",
colour = "purple"
) +
# non-decision time
annotate(
geom = "rect",
xmin = max(x), xmax = max(x) + tau / 2,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
annotate(
geom = "rect",
xmin = 0, xmax = tau,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
# drift rate
# geom_segment(
#     aes(
#         x = tau,
#         # xend = tau + 0.1,
#         xend = tau + 0.1 * max_x,
#         y = beta_s,
#         # yend = log(delta / (1 - beta) ) + delta / 2
#         # yend = beta_s + delta
#         yend = ifelse(beta_s + delta > s, s, beta_s + delta)
#         ),
#     arrow = arrow(
#         length = unit(0.2, "cm"),
#         ends = "last", type = "closed"
#         ),
#     size = 0.5, colour = "darkgreen"
#     ) +
geom_spoke(
aes(x = tau, y = beta_s, angle = drift_angle * (pi / 180), radius = 0.5),
arrow = arrow(length = unit(0.2, "cm"), ends = "last", type = "closed"),
color  = "darkgreen"
) +
annotate(
geom = "label",
x = tau,
y = beta_s,
hjust = 1, vjust = 0.5,
size = 5,
label = "drift rate",
color = "darkgreen"
) +
# boundary separation
geom_segment(
aes(
x = mean(x), xend = mean(x),
y = -s, yend = s,
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "both", type = "closed"
),
size = 0.5, colour = "black"
) +
annotate(
geom = "label",
x = mean(x), y = 0,
hjust = 0.5, vjust = 0.5,
size = 5,
label = "boundary separation",
color = "black"
) +
# labelling distributions
annotate(
geom = "label",
x = min(df2$x[df2$resp == "upper"]),
y = min(df2$y[df2$resp == "upper"]),
hjust = 0, vjust = -0.5,
size = 5,
label = paste0(
"RT distribution for correct responses (",
(n_correct / 1e3) * 100, "% of trials)"
)
) +
annotate(
geom = "label",
x = min(df2$x[df2$resp == "lower"]),
y = max(df2$y[df2$resp == "lower"]),
hjust = 0, vjust = 1.5,
size = 5,
label = paste0(
"RT distribution for incorrect responses (",
(n_incorrect / 1e3) * 100, "% of trials)"
)
) +
# aesthetics
theme_ipsum_rc(base_size = 12, axis_title_size = 12) +
theme(
axis.text.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 3), "cm")
) +
labs(x = "Reaction time (in seconds)", y = "") +
# extends plotting area
coord_cartesian(xlim = c(0, NA), clip = "off") +
# adds a second axis on the top
scale_x_continuous(
sec.axis = sec_axis(trans = ~.)
)
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp(appName = "shiny_DDM")
runApp()
rsconnect::deployApp(appName = "shiny_DDM")
library(shinythemes)
library(shinyhelper)
library(hrbrthemes)
library(tidyverse)
library(pBrackets)
library(RWiener)
library(shiny)
nobs = 1e3; alpha = 2; beta = 0.5; delta = 0; tau = 1;
df <- rwiener(n = nobs, alpha = alpha, tau = tau, beta = beta, delta = delta)
nobs = 1e4; alpha = 2; beta = 0.5; delta = 0; tau = 1;
df <- rwiener(n = nobs, alpha = alpha, tau = tau, beta = beta, delta = delta)
nobs = 1e3; alpha = 2; beta = 0.5; delta = 0; tau = 1;
df <- rwiener(n = nobs, alpha = alpha, tau = tau, beta = beta, delta = delta)
?rwiener
?dens
dens <- dwiener(
q, alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "both", give_log = FALSE
)
dens <- dwiener(
1:10, alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "both", give_log = FALSE
)
dens <- dwiener(
1, alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "both", give_log = FALSE
)
dens <- dwiener(
2.45, alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "both", give_log = FALSE
)
dens <- dwiener(
c(1, 2), alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "both", give_log = FALSE
)
seq(0, 15, 1e3)
?seq
seq.int(from = 0, to = 15, length.out = 1e3)
upper_dens <- dwiener(
seq.int(from = 0, to = 15, length.out = 1e3), alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "upper", give_log = FALSE
)
q <- seq.int(from = 0, to = 15, length.out = 1e3),
upper_dens <- dwiener(
q = q,
alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "upper", give_log = FALSE
)
plot(q, upper_dens)
?plot
q <- seq.int(from = 0, to = 15, length.out = 1e3)
upper_dens <- dwiener(
q = q,
alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "upper", give_log = FALSE
)
plot(q, upper_dens)
plot(q, upper_dens, type = "l")
q <- seq.int(from = 0, to = 15, length.out = 1e2)
upper_dens <- dwiener(
q = q,
alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "upper", give_log = FALSE
)
plot(q, upper_dens, type = "l")
q <- seq.int(from = 0, to = 15, length.out = 1e4)
upper_dens <- dwiener(
q = q,
alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "upper", give_log = FALSE
)
plot(q, upper_dens, type = "l")
# defines the grid of possible RT values
rt_grid <- seq.int(from = 0, to = 15, length.out = 1e3)
# computes the lower density
upper_dens <- dwiener(
q = rt_grid,
alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "lower", give_log = FALSE
)
# compute the upper density
upper_dens <- dwiener(
q = rt_grid,
alpha = alpha, tau = tau, beta = beta, delta = delta,
resp = "upper", give_log = FALSE
)
rwiener(1, 2,0.3,0.5,0)
dwiener(1.45, 2,0.3,0.5,0)
dwiener(1.45, 2,0.3,0.5,0, resp = "both")
dwiener(c(1.45, 2), 2,0.3,0.5,0, resp = "both")
?dwiener
dwiener
dwiener_c
runApp()
runApp()
runApp()
