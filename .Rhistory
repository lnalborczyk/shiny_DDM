# mutate(tail(traj_y) <- max(df2$y[df2$resp=="lower"]) )
mutate(traj_y = replace(traj_y, n(), 0) )
trajectories <- data.frame(x = traj_x, y = traj_y) %>%
slice(1:boundary_first_hit) %>%
# mutate(tail(traj_y) <- max(df2$y[df2$resp=="lower"]) )
mutate(traj_y = ifelse(row_number() == n(), 0, traj_y) )
View(trajectories)
trajectories <- data.frame(x = traj_x, y = traj_y) %>%
slice(1:boundary_first_hit) %>%
# mutate(tail(traj_y) <- max(df2$y[df2$resp=="lower"]) )
mutate(
traj_y = ifelse(
row_number() == n(),
max(df2$y[df2$resp=="lower"]),
traj_y
)
)
View(trajectories)
df2 %>%
ggplot(aes(x = x, y = y, fill = resp, color = resp) ) +
# plotting densities
geom_segment(
data = . %>% filter(resp == "upper"),
aes(x = 0, xend = max_x, y = min(y), yend = min(y) ),
color = upper_color
) +
geom_segment(
data = . %>% filter(resp == "lower"),
aes(x = 0, xend = max_x, y = max(y), yend = max(y) ),
color = lower_color
) +
# plotting densities
geom_polygon(alpha = 0.8) +
# defining densities colors
scale_fill_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
scale_color_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
# plots some evidence trajectory
geom_line(
data = trajectories,
aes(x = x, y = y),
inherit.aes = FALSE,
alpha = 0.5
) +
# stimulus onset
geom_vline(xintercept = 0, lty = 2, col = "grey30") +
annotate(
geom = "text",
x = 0, y = max(y),
hjust = 1,
vjust = -1,
size = 5, angle = 90,
label = "stimulus onset",
color = "grey30"
) +
# starting point
geom_hline(yintercept = beta_s, lty = 3, col = "purple") +
annotate(
geom = "label",
x = 0, y = beta_s,
hjust = 1,
vjust = 0.5,
size = 5,
label = "starting point",
colour = "purple"
) +
# non-decision time
annotate(
geom = "rect",
xmin = 0, xmax = tau,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
# drift rate
# geom_segment(
#     aes(
#         x = tau,
#         # xend = tau + 0.1,
#         xend = tau + 0.1 * max_x,
#         y = beta_s,
#         # yend = log(delta / (1 - beta) ) + delta / 2
#         # yend = beta_s + delta
#         yend = ifelse(beta_s + delta > s, s, beta_s + delta)
#         ),
#     arrow = arrow(
#         length = unit(0.2, "cm"),
#         ends = "last", type = "closed"
#         ),
#     size = 0.5, colour = "darkgreen"
#     ) +
geom_spoke(
aes(
x = tau, y = beta_s,
angle = drift_angle * (pi / 180),
radius = 0.5
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "last", type = "closed"
),
color  = "darkgreen"
) +
annotate(
geom = "label",
x = tau,
y = beta_s,
hjust = 1, vjust = 0.5,
size = 5,
label = "drift rate",
color = "darkgreen"
) +
# boundary separation
geom_segment(
aes(
x = mean(x), xend = mean(x),
y = -s, yend = s,
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "both", type = "closed"
),
size = 0.5, colour = "black"
) +
annotate(
geom = "label",
x = mean(x), y = 0,
hjust = 0.5, vjust = 0.5,
size = 5,
label = "boundary separation",
color = "black"
) +
# labelling distributions
annotate(
geom = "label",
x = min(df2$x[df2$resp == "upper"]),
y = min(df2$y[df2$resp == "upper"]),
hjust = 0, vjust = -0.5,
size = 5,
label = paste0(
"RT distribution for upper responses (",
(n_upper / 1e3) * 100, "% of trials)"
)
) +
annotate(
geom = "label",
x = min(df2$x[df2$resp == "lower"]),
y = max(df2$y[df2$resp == "lower"]),
hjust = 0, vjust = 1.5,
size = 5,
label = paste0(
"RT distribution for lower responses (",
(n_lower / 1e3) * 100, "% of trials)"
)
) +
# aesthetics
theme_ipsum_rc(base_size = 14, axis_title_size = 14) +
theme(
axis.text.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 3), "cm")
) +
labs(x = "Response time (in seconds)", y = "") +
# extends plotting area
coord_cartesian(xlim = c(0, NA), clip = "off") +
# adds a second axis on the top
scale_x_continuous(sec.axis = sec_axis(trans = ~.) )
max(df2$y[df2$resp=="lower"])
View(trajectories)
range(trajectories$traj_y)
beta
s
beta_s
# generates some evidence trajectories
traj_length <- 100
traj_y <- cumsum(c(beta_s, rnorm(traj_length-1, delta, 0.1) ) )
traj_x <- seq.int(from = tau, to = max(df2$x), length.out = 1e2)
boundary_first_hit <- min(which(
traj_y >= min(df2$y[df2$resp=="upper"]) |
traj_y <= max(df2$y[df2$resp=="lower"])
) )
trajectories <- data.frame(x = traj_x, y = traj_y) %>%
slice(1:boundary_first_hit) %>%
# mutate(tail(traj_y) <- max(df2$y[df2$resp=="lower"]) )
mutate(
traj_y = ifelse(
row_number() == n(),
max(df2$y[df2$resp=="lower"]),
traj_y
)
)
df2 %>%
ggplot(aes(x = x, y = y, fill = resp, color = resp) ) +
# plotting densities
geom_segment(
data = . %>% filter(resp == "upper"),
aes(x = 0, xend = max_x, y = min(y), yend = min(y) ),
color = upper_color
) +
geom_segment(
data = . %>% filter(resp == "lower"),
aes(x = 0, xend = max_x, y = max(y), yend = max(y) ),
color = lower_color
) +
# plotting densities
geom_polygon(alpha = 0.8) +
# defining densities colors
scale_fill_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
scale_color_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
# plots some evidence trajectory
geom_line(
data = trajectories,
aes(x = x, y = y),
inherit.aes = FALSE,
alpha = 0.5
) +
# stimulus onset
geom_vline(xintercept = 0, lty = 2, col = "grey30") +
annotate(
geom = "text",
x = 0, y = max(y),
hjust = 1,
vjust = -1,
size = 5, angle = 90,
label = "stimulus onset",
color = "grey30"
) +
# starting point
geom_hline(yintercept = beta_s, lty = 3, col = "purple") +
annotate(
geom = "label",
x = 0, y = beta_s,
hjust = 1,
vjust = 0.5,
size = 5,
label = "starting point",
colour = "purple"
) +
# non-decision time
annotate(
geom = "rect",
xmin = 0, xmax = tau,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
# drift rate
# geom_segment(
#     aes(
#         x = tau,
#         # xend = tau + 0.1,
#         xend = tau + 0.1 * max_x,
#         y = beta_s,
#         # yend = log(delta / (1 - beta) ) + delta / 2
#         # yend = beta_s + delta
#         yend = ifelse(beta_s + delta > s, s, beta_s + delta)
#         ),
#     arrow = arrow(
#         length = unit(0.2, "cm"),
#         ends = "last", type = "closed"
#         ),
#     size = 0.5, colour = "darkgreen"
#     ) +
geom_spoke(
aes(
x = tau, y = beta_s,
angle = drift_angle * (pi / 180),
radius = 0.5
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "last", type = "closed"
),
color  = "darkgreen"
) +
annotate(
geom = "label",
x = tau,
y = beta_s,
hjust = 1, vjust = 0.5,
size = 5,
label = "drift rate",
color = "darkgreen"
) +
# boundary separation
geom_segment(
aes(
x = mean(x), xend = mean(x),
y = -s, yend = s,
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "both", type = "closed"
),
size = 0.5, colour = "black"
) +
annotate(
geom = "label",
x = mean(x), y = 0,
hjust = 0.5, vjust = 0.5,
size = 5,
label = "boundary separation",
color = "black"
) +
# labelling distributions
annotate(
geom = "label",
x = min(df2$x[df2$resp == "upper"]),
y = min(df2$y[df2$resp == "upper"]),
hjust = 0, vjust = -0.5,
size = 5,
label = paste0(
"RT distribution for upper responses (",
(n_upper / 1e3) * 100, "% of trials)"
)
) +
annotate(
geom = "label",
x = min(df2$x[df2$resp == "lower"]),
y = max(df2$y[df2$resp == "lower"]),
hjust = 0, vjust = 1.5,
size = 5,
label = paste0(
"RT distribution for lower responses (",
(n_lower / 1e3) * 100, "% of trials)"
)
) +
# aesthetics
theme_ipsum_rc(base_size = 14, axis_title_size = 14) +
theme(
axis.text.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 3), "cm")
) +
labs(x = "Response time (in seconds)", y = "") +
# extends plotting area
coord_cartesian(xlim = c(0, NA), clip = "off") +
# adds a second axis on the top
scale_x_continuous(sec.axis = sec_axis(trans = ~.) )
View(trajectories)
trajectories <- data.frame(x = traj_x, y = traj_y) %>%
slice(1:boundary_first_hit) %>%
# mutate(tail(traj_y) <- max(df2$y[df2$resp=="lower"]) )
mutate(
y = ifelse(
row_number() == n(),
max(df2$y[df2$resp=="lower"]),
traj_y
)
)
df2 %>%
ggplot(aes(x = x, y = y, fill = resp, color = resp) ) +
# plotting densities
geom_segment(
data = . %>% filter(resp == "upper"),
aes(x = 0, xend = max_x, y = min(y), yend = min(y) ),
color = upper_color
) +
geom_segment(
data = . %>% filter(resp == "lower"),
aes(x = 0, xend = max_x, y = max(y), yend = max(y) ),
color = lower_color
) +
# plotting densities
geom_polygon(alpha = 0.8) +
# defining densities colors
scale_fill_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
scale_color_manual(
values = c(lower_color, upper_color),
guide = guide_none()
) +
# plots some evidence trajectory
geom_line(
data = trajectories,
aes(x = x, y = y),
inherit.aes = FALSE,
alpha = 0.5
) +
# stimulus onset
geom_vline(xintercept = 0, lty = 2, col = "grey30") +
annotate(
geom = "text",
x = 0, y = max(y),
hjust = 1,
vjust = -1,
size = 5, angle = 90,
label = "stimulus onset",
color = "grey30"
) +
# starting point
geom_hline(yintercept = beta_s, lty = 3, col = "purple") +
annotate(
geom = "label",
x = 0, y = beta_s,
hjust = 1,
vjust = 0.5,
size = 5,
label = "starting point",
colour = "purple"
) +
# non-decision time
annotate(
geom = "rect",
xmin = 0, xmax = tau,
ymin = -Inf, ymax = Inf,
alpha = 0.25
) +
# drift rate
# geom_segment(
#     aes(
#         x = tau,
#         # xend = tau + 0.1,
#         xend = tau + 0.1 * max_x,
#         y = beta_s,
#         # yend = log(delta / (1 - beta) ) + delta / 2
#         # yend = beta_s + delta
#         yend = ifelse(beta_s + delta > s, s, beta_s + delta)
#         ),
#     arrow = arrow(
#         length = unit(0.2, "cm"),
#         ends = "last", type = "closed"
#         ),
#     size = 0.5, colour = "darkgreen"
#     ) +
geom_spoke(
aes(
x = tau, y = beta_s,
angle = drift_angle * (pi / 180),
radius = 0.5
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "last", type = "closed"
),
color  = "darkgreen"
) +
annotate(
geom = "label",
x = tau,
y = beta_s,
hjust = 1, vjust = 0.5,
size = 5,
label = "drift rate",
color = "darkgreen"
) +
# boundary separation
geom_segment(
aes(
x = mean(x), xend = mean(x),
y = -s, yend = s,
),
arrow = arrow(
length = unit(0.2, "cm"),
ends = "both", type = "closed"
),
size = 0.5, colour = "black"
) +
annotate(
geom = "label",
x = mean(x), y = 0,
hjust = 0.5, vjust = 0.5,
size = 5,
label = "boundary separation",
color = "black"
) +
# labelling distributions
annotate(
geom = "label",
x = min(df2$x[df2$resp == "upper"]),
y = min(df2$y[df2$resp == "upper"]),
hjust = 0, vjust = -0.5,
size = 5,
label = paste0(
"RT distribution for upper responses (",
(n_upper / 1e3) * 100, "% of trials)"
)
) +
annotate(
geom = "label",
x = min(df2$x[df2$resp == "lower"]),
y = max(df2$y[df2$resp == "lower"]),
hjust = 0, vjust = 1.5,
size = 5,
label = paste0(
"RT distribution for lower responses (",
(n_lower / 1e3) * 100, "% of trials)"
)
) +
# aesthetics
theme_ipsum_rc(base_size = 14, axis_title_size = 14) +
theme(
axis.text.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 3), "cm")
) +
labs(x = "Response time (in seconds)", y = "") +
# extends plotting area
coord_cartesian(xlim = c(0, NA), clip = "off") +
# adds a second axis on the top
scale_x_continuous(sec.axis = sec_axis(trans = ~.) )
boundary_first_hit
runApp()
runApp()
